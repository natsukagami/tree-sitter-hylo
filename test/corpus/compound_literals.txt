==================
Compound Literals
==================

let a = ([1, 2] as Int[])[0]
let b = [1, 2]           // OK, 'b' has type 'Int[2]'
let c = [1, 2.0]         // error: '2.0' does not have type 'Int'
let d: Float64[n] = [1, 2] // OK, 'd' has type 'Float64[2]'
let e: Int[] = []        // warning: zero-length buffer

let a = [:]                // error: cannot infer empty map type without context
let b = [1: "a", 2: "b"]   // OK, 'b' has type 'Map<Int, String>'
let c = [1: "a", 2.0: "b"] // error: '2.0' does not have type 'Int'
let d: Map<Float64, String> = [1: "a", 2.0: "b"] // OK
let e: Map<Float64, String> = [:] // OK

---

(source_file
  (binding_decl
    (binding_pattern
      (binding_introducer)
      (identifier))
    (expr
      (subscript_call_expr
        (tuple_expr
          (tuple_expr_element
            (expr
              (buffer_literal
                (expr
                  (integer_literal
                    (decimal_literal)))
                (expr
                  (integer_literal
                    (decimal_literal))))
              (type_casting_tail
                (array_type_expr
                  (name_type_expr
                    (selector
                      (identifier_expr
                        (identifier)))))))))
        (call_argument
          (expr
            (integer_literal
              (decimal_literal)))))))
  (binding_decl
    (binding_pattern
      (binding_introducer)
      (identifier))
    (expr
      (buffer_literal
        (expr
          (integer_literal
            (decimal_literal)))
        (expr
          (integer_literal
            (decimal_literal))))))
  (single_line_comment)
  (binding_decl
    (binding_pattern
      (binding_introducer)
      (identifier))
    (expr
      (buffer_literal
        (expr
          (integer_literal
            (decimal_literal)))
        (expr
          (floating_point_literal)))))
  (single_line_comment)
  (binding_decl
    (binding_pattern
      (binding_introducer)
      (identifier)
      (array_type_expr
        (name_type_expr
          (selector
            (identifier_expr
              (identifier))))
        (expr
          (value_member_expr
            (selector
              (identifier_expr
                (identifier)))))))
    (expr
      (buffer_literal
        (expr
          (integer_literal
            (decimal_literal)))
        (expr
          (integer_literal
            (decimal_literal))))))
  (single_line_comment)
  (binding_decl
    (binding_pattern
      (binding_introducer)
      (identifier)
      (array_type_expr
        (name_type_expr
          (selector
            (identifier_expr
              (identifier))))))
    (expr
      (buffer_literal)))
  (single_line_comment)
  (binding_decl
    (binding_pattern
      (binding_introducer)
      (identifier))
    (expr
      (map_literal)))
  (single_line_comment)
  (binding_decl
    (binding_pattern
      (binding_introducer)
      (identifier))
    (expr
      (map_literal
        (map_component
          (expr
            (integer_literal
              (decimal_literal)))
          (expr
            (string_literal
              (simple_string))))
        (map_component
          (expr
            (integer_literal
              (decimal_literal)))
          (expr
            (string_literal
              (simple_string)))))))
  (single_line_comment)
  (binding_decl
    (binding_pattern
      (binding_introducer)
      (identifier))
    (expr
      (map_literal
        (map_component
          (expr
            (integer_literal
              (decimal_literal)))
          (expr
            (string_literal
              (simple_string))))
        (map_component
          (expr
            (floating_point_literal))
          (expr
            (string_literal
              (simple_string)))))))
  (single_line_comment)
  (binding_decl
    (binding_pattern
      (binding_introducer)
      (identifier)
      (name_type_expr
        (selector
          (identifier_expr
            (identifier))
          (static_argument_list
            (static_argument
              (name_type_expr
                (selector
                  (identifier_expr
                    (identifier)))))
            (static_argument
              (name_type_expr
                (selector
                  (identifier_expr
                    (identifier)))))))))
    (expr
      (map_literal
        (map_component
          (expr
            (integer_literal
              (decimal_literal)))
          (expr
            (string_literal
              (simple_string))))
        (map_component
          (expr
            (floating_point_literal))
          (expr
            (string_literal
              (simple_string)))))))
  (single_line_comment)
  (binding_decl
    (binding_pattern
      (binding_introducer)
      (identifier)
      (name_type_expr
        (selector
          (identifier_expr
            (identifier))
          (static_argument_list
            (static_argument
              (name_type_expr
                (selector
                  (identifier_expr
                    (identifier)))))
            (static_argument
              (name_type_expr
                (selector
                  (identifier_expr
                    (identifier)))))))))
    (expr
      (map_literal)))
  (single_line_comment))
