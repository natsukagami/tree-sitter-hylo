============
Future
============

/// A future that cannot escape the local scope.
public type Future<E: Movable & Deinitializable> {

  // TODO
  public typealias Result = Int

  /// The base frame object needed by the underlying implementation.
  private var base_frame: SpawnFrameBase

  /// What needs to be called to produce the value in the future.
  private var f: [E]() -> Int

  /// The result of the computation.
  private var r: Optional<Int>

  /// Initializes `self` with `f`, and spawns the computation.
  public init(_ f: sink [E]() -> Int) {
    &self.base_frame = .new()
    &self.f = f
    &self.r = .none()

    let local_f = fun (_ frame: inout SpawnFrameBase) -> Void {
      var this = PointerToMutable<Self>(type_punning: mutable_pointer[to: &frame])
      &this.unsafe[].do_call()
    }
    concore2full_spawn2(&self.base_frame, local_f)
  }

  /// Awaits the result of the computation.
  ///
  /// - Note: May return on a different OS thread than the one that called this.
  public fun await() sink -> Result {
    concore2full_await(self.base_frame)

    if let r: Int = self.r {
      return r.copy()
    } else {
      fatal_error()
    }
  }

  private fun do_call() inout {
    &r = self.f() as _
  }

}

/// Describes the frame needed to spawn a computation. Mimics the C implementation.
type SpawnFrameBase: Deinitializable, Movable {

  let task_function: MemoryAddress

  let next_task: MemoryAddress

  let sync_state: Int32

  let originator_context: MemoryAddress

  let originator_thread_reclaimer: MemoryAddress

  let target_context: MemoryAddress

  let target_thread_reclaimer: MemoryAddress

  let user_function: MemoryAddress

  public init() {
    &self.task_function = .null()
    &self.next_task = .null()
    &self.sync_state = 0
    &self.originator_context = .null()
    &self.originator_thread_reclaimer = .null()
    &self.target_context = .null()
    &self.target_thread_reclaimer = .null()
    &self.user_function = .null()
  }

}

// @external("concore2full_spawn")
// fun concore2full_spawn(_ frame: set SpawnFrameBase, _ f: Int); // TODO: f is a pointer to a function

/// Spawns the execution of `f` using control data `frame`.
@external("concore2full_spawn2")
fun concore2full_spawn2(_ frame: set SpawnFrameBase, _ f: [](inout SpawnFrameBase) let -> Void);

/// Awaits the completion of the computation started in `frame`.
@external("concore2full_await")
fun concore2full_await(_ frame: SpawnFrameBase);

---

(source_file
  (single_line_comment)
  (product_type_decl
    (product_type_head
      (access_modifier)
      (identifier)
      (generic_clause
        (generic_type_parameter
          (identifier)
          (trait_composition
            (name_type_expr
              (identifier))
            (name_type_expr
              (identifier))))))
    (single_line_comment)
    (type_alias_decl
      (type_alias_head
        (access_modifier)
        (identifier))
      (name_type_expr
        (identifier)))
    (single_line_comment)
    (binding_decl
      (access_modifier)
      (binding_pattern
        (binding_introducer)
        (identifier)
        (name_type_expr
          (identifier))))
    (single_line_comment)
    (binding_decl
      (access_modifier)
      (binding_pattern
        (binding_introducer)
        (identifier)
        (lambda_type_expr
          (lambda_environment
            (name_type_expr
              (identifier)))
          (name_type_expr
            (identifier)))))
    (single_line_comment)
    (binding_decl
      (access_modifier)
      (binding_pattern
        (binding_introducer)
        (identifier)
        (name_type_expr
          (identifier)
          (generic_argument_list
            (generic_type_argument
              (name_type_expr
                (identifier)))))))
    (single_line_comment)
    (function_decl
      (function_head
        (access_modifier)
        (function_name))
      (function_signature
        (parameter_decl
          (identifier)
          (parameter_passing_convention)
          (lambda_type_expr
            (lambda_environment
              (name_type_expr
                (identifier)))
            (name_type_expr
              (identifier)))))
      (brace_stmt
        (stmt
          (expr
            (inout_expr
              (expr
                (value_member_expr
                  (primary_decl_ref
                    (identifier_expr
                      (identifier)))
                  (primary_decl_ref
                    (identifier_expr
                      (identifier))))))
            (infix_operator_tail
              (infix_operator)
              (function_call_expr
                (implicit_member_ref
                  (primary_decl_ref
                    (identifier_expr
                      (identifier))))))))
        (stmt
          (expr
            (inout_expr
              (expr
                (value_member_expr
                  (primary_decl_ref
                    (identifier_expr
                      (identifier)))
                  (primary_decl_ref
                    (identifier_expr
                      (identifier))))))
            (infix_operator_tail
              (infix_operator)
              (primary_decl_ref
                (identifier_expr
                  (identifier))))))
        (stmt
          (expr
            (inout_expr
              (expr
                (value_member_expr
                  (primary_decl_ref
                    (identifier_expr
                      (identifier)))
                  (primary_decl_ref
                    (identifier_expr
                      (identifier))))))
            (infix_operator_tail
              (infix_operator)
              (function_call_expr
                (implicit_member_ref
                  (primary_decl_ref
                    (identifier_expr
                      (identifier))))))))
        (stmt
          (binding_decl
            (binding_pattern
              (binding_introducer)
              (identifier))
            (expr
              (lambda_expr
                (function_signature
                  (parameter_decl
                    (identifier)
                    (parameter_passing_convention)
                    (name_type_expr
                      (identifier)))
                  (name_type_expr
                    (identifier)))
                (brace_stmt
                  (stmt
                    (binding_decl
                      (binding_pattern
                        (binding_introducer)
                        (identifier))
                      (expr
                        (function_call_expr
                          (primary_decl_ref
                            (identifier_expr
                              (identifier))
                            (static_argument_list
                              (static_argument
                                (name_type_expr
                                  (identifier)))))
                          (call_argument
                            (identifier)
                            (expr
                              (subscript_call_expr
                                (primary_decl_ref
                                  (identifier_expr
                                    (identifier)))
                                (call_argument
                                  (identifier)
                                  (expr
                                    (inout_expr
                                      (expr
                                        (primary_decl_ref
                                          (identifier_expr
                                            (identifier))))))))))))))
                  (stmt
                    (expr
                      (inout_expr
                        (expr
                          (function_call_expr
                            (value_member_expr
                              (subscript_call_expr
                                (value_member_expr
                                  (primary_decl_ref
                                    (identifier_expr
                                      (identifier)))
                                  (primary_decl_ref
                                    (identifier_expr
                                      (identifier)))))
                              (primary_decl_ref
                                (identifier_expr
                                  (identifier))))))))))))))
        (stmt
          (expr
            (function_call_expr
              (primary_decl_ref
                (identifier_expr
                  (identifier)))
              (call_argument
                (expr
                  (inout_expr
                    (expr
                      (value_member_expr
                        (primary_decl_ref
                          (identifier_expr
                            (identifier)))
                        (primary_decl_ref
                          (identifier_expr
                            (identifier))))))))
              (call_argument
                (expr
                  (primary_decl_ref
                    (identifier_expr
                      (identifier))))))))))
    (single_line_comment)
    (single_line_comment)
    (single_line_comment)
    (function_decl
      (function_head
        (access_modifier)
        (function_name
          (identifier)))
      (function_signature
        (receiver_effect)
        (name_type_expr
          (identifier)))
      (brace_stmt
        (stmt
          (expr
            (function_call_expr
              (primary_decl_ref
                (identifier_expr
                  (identifier)))
              (call_argument
                (expr
                  (value_member_expr
                    (primary_decl_ref
                      (identifier_expr
                        (identifier)))
                    (primary_decl_ref
                      (identifier_expr
                        (identifier)))))))))
        (stmt
          (expr
            (conditional_expr
              (conditional_clause_item
                (binding_pattern
                  (binding_introducer)
                  (identifier)
                  (name_type_expr
                    (identifier)))
                (expr
                  (value_member_expr
                    (primary_decl_ref
                      (identifier_expr
                        (identifier)))
                    (primary_decl_ref
                      (identifier_expr
                        (identifier))))))
              (brace_stmt
                (stmt
                  (jump_stmt
                    (expr
                      (function_call_expr
                        (value_member_expr
                          (primary_decl_ref
                            (identifier_expr
                              (identifier)))
                          (primary_decl_ref
                            (identifier_expr
                              (identifier)))))))))
              (brace_stmt
                (stmt
                  (expr
                    (function_call_expr
                      (primary_decl_ref
                        (identifier_expr
                          (identifier))))))))))))
    (function_decl
      (function_head
        (access_modifier)
        (function_name
          (identifier)))
      (function_signature
        (receiver_effect))
      (brace_stmt
        (stmt
          (expr
            (inout_expr
              (expr
                (primary_decl_ref
                  (identifier_expr
                    (identifier)))))
            (infix_operator_tail
              (infix_operator)
              (function_call_expr
                (value_member_expr
                  (primary_decl_ref
                    (identifier_expr
                      (identifier)))
                  (primary_decl_ref
                    (identifier_expr
                      (identifier))))))
            (type_casting_tail
              (name_type_expr
                (identifier))))))))
  (single_line_comment)
  (product_type_decl
    (product_type_head
      (identifier)
      (conformance_list
        (name_type_expr
          (identifier))
        (name_type_expr
          (identifier))))
    (binding_decl
      (binding_pattern
        (binding_introducer)
        (identifier)
        (name_type_expr
          (identifier))))
    (binding_decl
      (binding_pattern
        (binding_introducer)
        (identifier)
        (name_type_expr
          (identifier))))
    (binding_decl
      (binding_pattern
        (binding_introducer)
        (identifier)
        (name_type_expr
          (identifier))))
    (binding_decl
      (binding_pattern
        (binding_introducer)
        (identifier)
        (name_type_expr
          (identifier))))
    (binding_decl
      (binding_pattern
        (binding_introducer)
        (identifier)
        (name_type_expr
          (identifier))))
    (binding_decl
      (binding_pattern
        (binding_introducer)
        (identifier)
        (name_type_expr
          (identifier))))
    (binding_decl
      (binding_pattern
        (binding_introducer)
        (identifier)
        (name_type_expr
          (identifier))))
    (binding_decl
      (binding_pattern
        (binding_introducer)
        (identifier)
        (name_type_expr
          (identifier))))
    (function_decl
      (function_head
        (access_modifier)
        (function_name))
      (function_signature)
      (brace_stmt
        (stmt
          (expr
            (inout_expr
              (expr
                (value_member_expr
                  (primary_decl_ref
                    (identifier_expr
                      (identifier)))
                  (primary_decl_ref
                    (identifier_expr
                      (identifier))))))
            (infix_operator_tail
              (infix_operator)
              (function_call_expr
                (implicit_member_ref
                  (primary_decl_ref
                    (identifier_expr
                      (identifier))))))))
        (stmt
          (expr
            (inout_expr
              (expr
                (value_member_expr
                  (primary_decl_ref
                    (identifier_expr
                      (identifier)))
                  (primary_decl_ref
                    (identifier_expr
                      (identifier))))))
            (infix_operator_tail
              (infix_operator)
              (function_call_expr
                (implicit_member_ref
                  (primary_decl_ref
                    (identifier_expr
                      (identifier))))))))
        (stmt
          (expr
            (inout_expr
              (expr
                (value_member_expr
                  (primary_decl_ref
                    (identifier_expr
                      (identifier)))
                  (primary_decl_ref
                    (identifier_expr
                      (identifier))))))
            (infix_operator_tail
              (infix_operator)
              (integer_literal
                (decimal_literal)))))
        (stmt
          (expr
            (inout_expr
              (expr
                (value_member_expr
                  (primary_decl_ref
                    (identifier_expr
                      (identifier)))
                  (primary_decl_ref
                    (identifier_expr
                      (identifier))))))
            (infix_operator_tail
              (infix_operator)
              (function_call_expr
                (implicit_member_ref
                  (primary_decl_ref
                    (identifier_expr
                      (identifier))))))))
        (stmt
          (expr
            (inout_expr
              (expr
                (value_member_expr
                  (primary_decl_ref
                    (identifier_expr
                      (identifier)))
                  (primary_decl_ref
                    (identifier_expr
                      (identifier))))))
            (infix_operator_tail
              (infix_operator)
              (function_call_expr
                (implicit_member_ref
                  (primary_decl_ref
                    (identifier_expr
                      (identifier))))))))
        (stmt
          (expr
            (inout_expr
              (expr
                (value_member_expr
                  (primary_decl_ref
                    (identifier_expr
                      (identifier)))
                  (primary_decl_ref
                    (identifier_expr
                      (identifier))))))
            (infix_operator_tail
              (infix_operator)
              (function_call_expr
                (implicit_member_ref
                  (primary_decl_ref
                    (identifier_expr
                      (identifier))))))))
        (stmt
          (expr
            (inout_expr
              (expr
                (value_member_expr
                  (primary_decl_ref
                    (identifier_expr
                      (identifier)))
                  (primary_decl_ref
                    (identifier_expr
                      (identifier))))))
            (infix_operator_tail
              (infix_operator)
              (function_call_expr
                (implicit_member_ref
                  (primary_decl_ref
                    (identifier_expr
                      (identifier))))))))
        (stmt
          (expr
            (inout_expr
              (expr
                (value_member_expr
                  (primary_decl_ref
                    (identifier_expr
                      (identifier)))
                  (primary_decl_ref
                    (identifier_expr
                      (identifier))))))
            (infix_operator_tail
              (infix_operator)
              (function_call_expr
                (implicit_member_ref
                  (primary_decl_ref
                    (identifier_expr
                      (identifier)))))))))))
  (single_line_comment)
  (single_line_comment)
  (single_line_comment)
  (function_decl
    (decl_attr
      (attribute_name)
      (attribute_argument_list
        (attribute_argument
          (simple_string))))
    (function_head
      (function_name
        (identifier)))
    (function_signature
      (parameter_decl
        (identifier)
        (parameter_passing_convention)
        (name_type_expr
          (identifier)))
      (parameter_decl
        (identifier)
        (lambda_type_expr
          (lambda_environment)
          (lambda_parameter
            (parameter_passing_convention)
            (name_type_expr
              (identifier)))
          (receiver_effect)
          (name_type_expr
            (identifier))))))
  (single_line_comment)
  (function_decl
    (decl_attr
      (attribute_name)
      (attribute_argument_list
        (attribute_argument
          (simple_string))))
    (function_head
      (function_name
        (identifier)))
    (function_signature
      (parameter_decl
        (identifier)
        (name_type_expr
          (identifier))))))
