===================
LambdaTypeInference
===================

//- typeCheck expecting: failure

fun check<T>(_ x: T) {}

public fun main() {
  let f0 = fun () { 42 }
  check<[]() -> Int>(f0)

  let f1 = fun (x: sink Int) { x }
  check<[](x: sink Int) -> Int>(f1)

  let f2: [](x: sink Int) -> Int = fun (x) { x }
  check<[](x: sink Int) -> Int>(f2)

  let f3 = fun (x: sink Int) -> Int {
    let y = x
    return y
  }
  check<[](x: sink Int) -> Int>(f3)

  let x0 = (fun (_ x) { x.copy() })(42)
  check<Int>(x0)

  //! @+1 diagnostic cannot infer complex return type; add an explicit return type annotation
  let _ = fun (x: sink Int) {}

  //! @+1 diagnostic cannot initialize object of type '[{}] (x: let Int) let -> Int' with value of type '[{}] () let -> Int'
  let _: [](x: Int) -> Int = fun () { 42 }

  //! @+1 diagnostic cannot initialize object of type '[{}] (x: let Int) let -> Int' with value of type '[{}] (y: let Int) let -> Int'
  let _: [](x: Int) -> Int = fun (y: Int) { 42 }
}

---

(source_file
  (single_line_comment)
  (function_decl
    (function_head
      (function_name
        (identifier))
      (generic_clause
        (generic_type_parameter
          (identifier))))
    (function_signature
      (parameter_decl
        (identifier)
        (name_type_expr
          (selector
            (identifier_expr
              (identifier))))))
    (brace_stmt))
  (function_decl
    (function_head
      (access_modifier)
      (function_name
        (identifier)))
    (function_signature)
    (brace_stmt
      (stmt
        (binding_decl
          (binding_pattern
            (binding_introducer)
            (identifier))
          (lambda_expr
            (function_signature)
            (brace_stmt
              (stmt
                (integer_literal
                  (decimal_literal)))))))
      (stmt
        (function_call_expr
          (value_member_expr
            (selector
              (identifier_expr
                (identifier))
              (static_argument_list
                (static_argument
                  (lambda_type_expr
                    (lambda_environment)
                    (name_type_expr
                      (selector
                        (identifier_expr
                          (identifier)))))))))
          (call_argument
            (value_member_expr
              (selector
                (identifier_expr
                  (identifier)))))))
      (stmt
        (binding_decl
          (binding_pattern
            (binding_introducer)
            (identifier))
          (lambda_expr
            (function_signature
              (parameter_decl
                (identifier)
                (parameter_passing_convention)
                (name_type_expr
                  (selector
                    (identifier_expr
                      (identifier))))))
            (brace_stmt
              (stmt
                (value_member_expr
                  (selector
                    (identifier_expr
                      (identifier)))))))))
      (stmt
        (function_call_expr
          (value_member_expr
            (selector
              (identifier_expr
                (identifier))
              (static_argument_list
                (static_argument
                  (lambda_type_expr
                    (lambda_environment)
                    (lambda_parameter
                      (identifier)
                      (parameter_passing_convention)
                      (name_type_expr
                        (selector
                          (identifier_expr
                            (identifier)))))
                    (name_type_expr
                      (selector
                        (identifier_expr
                          (identifier)))))))))
          (call_argument
            (value_member_expr
              (selector
                (identifier_expr
                  (identifier)))))))
      (stmt
        (binding_decl
          (binding_pattern
            (binding_introducer)
            (identifier)
            (lambda_type_expr
              (lambda_environment)
              (lambda_parameter
                (identifier)
                (parameter_passing_convention)
                (name_type_expr
                  (selector
                    (identifier_expr
                      (identifier)))))
              (name_type_expr
                (selector
                  (identifier_expr
                    (identifier))))))
          (lambda_expr
            (function_signature
              (parameter_decl
                (identifier)))
            (brace_stmt
              (stmt
                (value_member_expr
                  (selector
                    (identifier_expr
                      (identifier)))))))))
      (stmt
        (function_call_expr
          (value_member_expr
            (selector
              (identifier_expr
                (identifier))
              (static_argument_list
                (static_argument
                  (lambda_type_expr
                    (lambda_environment)
                    (lambda_parameter
                      (identifier)
                      (parameter_passing_convention)
                      (name_type_expr
                        (selector
                          (identifier_expr
                            (identifier)))))
                    (name_type_expr
                      (selector
                        (identifier_expr
                          (identifier)))))))))
          (call_argument
            (value_member_expr
              (selector
                (identifier_expr
                  (identifier)))))))
      (stmt
        (binding_decl
          (binding_pattern
            (binding_introducer)
            (identifier))
          (lambda_expr
            (function_signature
              (parameter_decl
                (identifier)
                (parameter_passing_convention)
                (name_type_expr
                  (selector
                    (identifier_expr
                      (identifier)))))
              (name_type_expr
                (selector
                  (identifier_expr
                    (identifier)))))
            (brace_stmt
              (stmt
                (binding_decl
                  (binding_pattern
                    (binding_introducer)
                    (identifier))
                  (value_member_expr
                    (selector
                      (identifier_expr
                        (identifier))))))
              (stmt
                (jump_stmt
                  (value_member_expr
                    (selector
                      (identifier_expr
                        (identifier))))))))))
      (stmt
        (function_call_expr
          (value_member_expr
            (selector
              (identifier_expr
                (identifier))
              (static_argument_list
                (static_argument
                  (lambda_type_expr
                    (lambda_environment)
                    (lambda_parameter
                      (identifier)
                      (parameter_passing_convention)
                      (name_type_expr
                        (selector
                          (identifier_expr
                            (identifier)))))
                    (name_type_expr
                      (selector
                        (identifier_expr
                          (identifier)))))))))
          (call_argument
            (value_member_expr
              (selector
                (identifier_expr
                  (identifier)))))))
      (stmt
        (binding_decl
          (binding_pattern
            (binding_introducer)
            (identifier))
          (function_call_expr
            (tuple_expr
              (tuple_expr_element
                (lambda_expr
                  (function_signature
                    (parameter_decl
                      (identifier)))
                  (brace_stmt
                    (stmt
                      (function_call_expr
                        (value_member_expr
                          (value_member_expr
                            (selector
                              (identifier_expr
                                (identifier))))
                          (selector
                            (identifier_expr
                              (identifier))))))))))
            (call_argument
              (integer_literal
                (decimal_literal))))))
      (stmt
        (function_call_expr
          (value_member_expr
            (selector
              (identifier_expr
                (identifier))
              (static_argument_list
                (static_argument
                  (name_type_expr
                    (selector
                      (identifier_expr
                        (identifier))))))))
          (call_argument
            (value_member_expr
              (selector
                (identifier_expr
                  (identifier)))))))
      (single_line_comment)
      (stmt
        (binding_decl
          (binding_pattern
            (binding_introducer)
            (wildcard_pattern))
          (lambda_expr
            (function_signature
              (parameter_decl
                (identifier)
                (parameter_passing_convention)
                (name_type_expr
                  (selector
                    (identifier_expr
                      (identifier))))))
            (brace_stmt))))
      (single_line_comment)
      (stmt
        (binding_decl
          (binding_pattern
            (binding_introducer)
            (wildcard_pattern)
            (lambda_type_expr
              (lambda_environment)
              (lambda_parameter
                (identifier)
                (name_type_expr
                  (selector
                    (identifier_expr
                      (identifier)))))
              (name_type_expr
                (selector
                  (identifier_expr
                    (identifier))))))
          (lambda_expr
            (function_signature)
            (brace_stmt
              (stmt
                (integer_literal
                  (decimal_literal)))))))
      (single_line_comment)
      (stmt
        (binding_decl
          (binding_pattern
            (binding_introducer)
            (wildcard_pattern)
            (lambda_type_expr
              (lambda_environment)
              (lambda_parameter
                (identifier)
                (name_type_expr
                  (selector
                    (identifier_expr
                      (identifier)))))
              (name_type_expr
                (selector
                  (identifier_expr
                    (identifier))))))
          (lambda_expr
            (function_signature
              (parameter_decl
                (identifier)
                (name_type_expr
                  (selector
                    (identifier_expr
                      (identifier))))))
            (brace_stmt
              (stmt
                (integer_literal
                  (decimal_literal))))))))))
