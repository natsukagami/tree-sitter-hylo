==============
ArgumentLabels
==============

//- typeCheck expecting: failure

// This test case ensures that arguments labels are used to disambiguate overloaded symbols in call
// expressions, in order to get more precise diagnostics.

type A {
  public init(x: Int) {}
  public init(y: String) {}
}

public fun main() {
  //! @+1 diagnostic cannot pass value of type 'Bool' to parameter 'let Int'
  let a = A(x: true)
}

---

(source_file
  (single_line_comment)
  (single_line_comment)
  (single_line_comment)
  (product_type_decl
    (product_type_head
      (identifier))
    (function_decl
      (function_head
        (access_modifier)
        (function_name))
      (function_signature
        (parameter_decl
          (identifier)
          (name_type_expr
            (selector
              (identifier_expr
                (identifier))))))
      (brace_stmt))
    (function_decl
      (function_head
        (access_modifier)
        (function_name))
      (function_signature
        (parameter_decl
          (identifier)
          (name_type_expr
            (selector
              (identifier_expr
                (identifier))))))
      (brace_stmt)))
  (function_decl
    (function_head
      (access_modifier)
      (function_name
        (identifier)))
    (function_signature)
    (brace_stmt
      (single_line_comment)
      (stmt
        (binding_decl
          (binding_pattern
            (binding_introducer)
            (identifier))
          (function_call_expr
            (value_member_expr
              (selector
                (identifier_expr
                  (identifier))))
            (call_argument
              (identifier)
              (boolean_literal))))))))
